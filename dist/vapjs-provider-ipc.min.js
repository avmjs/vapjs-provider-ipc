!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("net")):"function"==typeof define&&define.amd?define("IpcProvider",["net"],r):"object"==typeof exports?exports.IpcProvider=r(require("net")):e.IpcProvider=r(e.net)}(this,function(e){return function(e){function r(n){if(o[n])return o[n].exports;var t=o[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var o={};return r.m=e,r.c=o,r.i=function(e){return e},r.d=function(e,r,o){Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:o})},r.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},r.p="",r(r.s=2)}([function(e,r,o){function n(e,r){var o=e&&e.error&&e.error.message?"[vapjs-provider-ipc] "+e.error.message:"[vapjs-provider-ipc] Invalid JSON RPC response from host provider "+r+": "+JSON.stringify(e,null,2);return Error(o)}function t(e){if(!(this instanceof t))throw Error('[vapjs-provider-ipc] the IpcProvider instance requires the "new" flag in order to function normally (e.g. `const vap = new Vap(new IpcProvider());`).');if("string"!=typeof e)throw Error("[vapjs-provider-ipc] the IpcProvider instance requires that the path be specified (e.g. `/var/run/gvap.ipc`)");var r=this;r.path=e,r.responseCallbacks={}}var i=o(1);t.prototype.sendAsync=function(e,r){var o=this;try{o.connection&&o.connection.writeable||(o.connection=i.connect(this.path))}catch(t){r(Error("[vapjs-provider-ipc] CONNECTION ERROR: Couldn't connect to path '"+o.path+"': "+JSON.stringify(t,null,2)),null)}o.connection.on("error",function(e){console.error("IPC Connection Error",e),r(Error("[vapjs-provider-ipc] CONNECTION TIMEOUT: request timeout. (i.e. your connect has timed out for whatever reason, check your provider)."),null)}),o.connection.on("end",function(e){console.error("IPC Connection Closed",e),r(Error("[vapjs-provider-ipc] CONNECTION TIMEOUT: request timeout. (i.e. your connect has timed out for whatever reason, check your provider)."),null)}),o.connection.on("data",function(e){var t=null;try{t=JSON.parse(e);var i=null;Array.isArray(t)?t.forEach(function(e){o.responseCallbacks[e.id]&&(i=e.id)}):i=t.id,o.responseCallbacks[i]&&(o.responseCallbacks[i](null,t),delete o.responseCallbacks[i])}catch(c){r(n(e,o.path),null)}});var c=e.id||e[0].id;o.responseCallbacks[c]=r,o.connection.write(JSON.stringify(e))},e.exports=t},function(e,r){e.exports=require("net")},function(e,r,o){e.exports=o(0)}])});